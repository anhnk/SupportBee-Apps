<!DOCTYPE html>
%html{:lang=>:en}
  %head
    %title #{@app_name} Console
    %link{:rel=>:stylesheet, :type=>'text/css', :href=>'/stylesheets/bootstrap.css'}
    %link{:rel=>:stylesheet, :type=>'text/css', :href=>'/stylesheets/bootstrap-responsive.css'}
    %link{:rel=>:stylesheet, :type=>'text/css', :href=>'/stylesheets/console.css'}
    %link{:rel=>:stylesheet, :type=>'text/css', :href=>'/stylesheets/sticky.css'}
    %link{:rel=>:stylesheet, :type=>'text/css', :href=>'/stylesheets/facebox.css'}

    %script{:type=>'text/javascript',:src => '/javascripts/jquery.js'}
    %script{:type=>'text/javascript',:src => '/javascripts/jquery.formparams.js'}
    %script{:type=>'text/javascript',:src => '/javascripts/sb.sample.payload.js'}
    %script{:type=>'text/javascript',:src => '/javascripts/sticky.js'}
    %script{:type=>'text/javascript',:src => '/javascripts/facebox.js'}
    %script{:type=>'text/javascript',:src => '/javascripts/handlebars.js'}
    %script{:type=>'text/javascript',:src => '/javascripts/sb.apps.js'}

  %body
    #facebox_overlay{:style=>'display:none;'}
      %form{:id=>:facebox_form}
        %input{:type=>:submit, :value=> 'Go',:id => :facebox_form_submit, :class=>'btn btn-primary'}

    .container
      %h3 SupportBee Apps Console: #{@app_name}
      %hr
      %form{:id=>:app_form}
        .row

          .span4
            %h4 Settings
            - @schema.each_pair do |param, options|
              - input_options = {}
              - input_options[:label] = options['label'] ? options['label'] : param.humanize
              - input_options[:as] = :checkbox if options['type'] == 'boolean'
              - input_options[:as] = :password if options['type'] == 'password'
              - input_options[:as] = :text if input_options[:as].nil?

              - name = "data[settings][#{param}]"
              - value = options['default']
              - value = options['default'] ? 1 : 0 if options['type'] == 'boolean'

              %label{:for => name} #{input_options[:label]}
              %input{:type => input_options[:as], :value => value, :name => name } 

          .span4
            %h4 Auth
            %p
              These values are used by the app platform to make API calls to the SupportBee. If your app is dependent on making API calls to SupportBee server, then create an account
              %a{:href => "https://app.supportbee.com"}
              %br
              If you dont fill these feilds, we will send dummy values to you app which cant be used to make API calls.

            %p
              %b SupportBee Test Subdomain:
              %br
              %input{:type => :text, :value => :test, :name => "data[auth][subdomain]"}

            %p
              %b 
                SupportBee Auth Token:
              %br
              (You can find this Account > API Token; You need to be an Admin)
              %br
              %input{:type => :text, :value => :abc, :name => "data[auth][auth_token]"}

          .span4
            .section
              %h4 Trigger Event
              .controls
                %select{:name=>:event_selector}
                  %option{:value => 'ticket.created'} Ticket Created
                  %option{:value => 'agent.reply.created'} Agent Reply Created
                  %option{:value => 'customer.reply.created'} Customer Reply Created
                  %option{:value => 'comment.created'} Comment Created
                %input{:id=>'event-submit', :type=>:submit, :class=>'btn btn-primary', :value => 'Go'}

            -if @config['action'] and @config['action']['button']
              .section
                %h4 Trigger Action Button
                %input{:id=>'action-button-submit', :type=>:submit, :class=>'btn btn-primary', :value => @config['action']['button']['label']}
              
    :javascript
      SB.CurrentApp = '#{@app_slug}'; 

      $(document).ready(function(){
        $('#event-submit').click(function(){
          post_data = $('#app_form').formParams();
          selected_event = post_data.event_selector;
          delete post_data['event_selector'];
          post_data.payload = SamplePayload[selected_event];
          post_url = "/#{@app_slug}/event/" + selected_event;
          $.ajax({
            type: 'POST',
            url: post_url,
            data: JSON.stringify(post_data),
            success: event_submit_success,
            beforeSend: event_submit_before_send,
            error: event_submit_error,
            dataType: 'json'
          });
          return false;
        });

        function event_submit_success(data, textStatus, jqXHR){
          $.sticky('<b class="green">Event Posted</b>');
        }
        function event_submit_before_send(jqXHR, settings){
          console.log(settings);
          $.sticky('<b>Posting event</b>');
        }

        function event_submit_error(data, textStatus, errorThrown){
          $.sticky('<b class="red">Event Failed</b>');
        }

        $('#action-button-submit').click(function(){
          var current = SB.Apps[SB.CurrentApp];
          var hasOverlay = true;
          if(typeof(current.button_overlay) === 'undefined'){
            hasOverlay = false;
          }
          if(hasOverlay){
            var html = current.button_overlay({});
            $('#facebox_form').prepend(html);
            $.facebox({div: '#facebox_overlay'});
          }
          return false;   
        });

        function ajaxPost() {
          $.ajax({
            type: 'post',
            url: "/apps/" + this.options.app + "/button",
            data: this.post_data,
            success: function(response) {
              response || (response = {});
              response.message || (response.message = "Data sent successfully.");
              $("#user_notification").removeClass('info');
              SB.Notification.show(response.message, {
                type: 'success'
              });
              return $(document).trigger("close.facebox");
            },
            error: function(response) {
              var responseText;
              response || (response = {});
              response.responseText || (response.responseText = '{}');
              responseText = JSON.parse(response.responseText);
              responseText.message || (responseText.message = "Something went wrong!");
              $("#user_notification").removeClass('info');
              return SB.Notification.show(responseText.message, {
                type: 'error'
              });
            }
          });
        }
      });
